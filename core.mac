|*** 
	core.mac
	Core Macro
	exspes007
	
	"Someone once told me it takes a lot of skill and preperation to be effectively lazy."
	-- unknown
	
	GitHub: https://github.com/exspes007
	GitHub Code: https://github.com/exspes007/core
	GitHub Wiki: https://github.com/exspes007/core/wiki
	
	/invoke ${Macro.Undeclared}
	/echo ${EverQuest.LastMouseOver.Name}
		
	Plugins:
	Required:	MQ2Cast, MQ2Exchange, MQ2MoveUtils, MQ2Debuffs
	Communications: MQ2EQBC/MQ2Netbots or MQ2DanNet
	Optional: MQ2Nav
		
	Files:
	- core.mac									You are looking at it
	- core.ini									Script settings that affect all the toons and environment.
	- common.inc								All common use functions.
	- events.inc								Contains responses to EQ generated changes (environment/emotes).
	- fixini.inc								holds all INI legacy removed entries.
	- hud.inc										Sets the Heads Up Display
	- declare.inc								99.9% of all variables, class INI creations, forced event, watched commands, alias, binds.
	- test.inc									empty. testing purposes.
	- class.???.inc							One include for each class [WIZ|NEC|MAG|ENC|WAR|PAL|SHD|BST|BER|BRD|RNG|ROG|CLR|DRU|SHM|MNK]
	- core.zone.ini							Zone spawn range, no cast, no melee, no mezz, NAMED, charm mobs
	- core.loot.ini							loot list. Leave, Keep, Destroy, Sell, Announce
	- blurb.inc									Expansion specific raid announcements. A lazy way to send raid instructions to all in RS
	- mode.inc									All Non-Standard Mode controlls
	- core.SERVER.CLS.NAME.ini	Character specific INI settings
	- core.augmentdump.ini			list of all augments by toon
	- custom.inc								initialized blank file for people that want to add custom ... whatever ... 
	
	Naming Conventions:
	Local/Private Variables: _camelCasing						eg. _loopOutside, _count
	Outer/Global Variables: camelCasing							eg. Nuke1 or healIntervention1
	Running Timers: Timer_Use_For_Timer 						eg. timer_check_ammo
	Timer Times: tUse_ForTimer 											eg. tCheck_Ammo
	Functions: name_name_name() 										eg. check_ammo()
	Functions [class specific]: name_SHORTNAME()  	eg. disc_WAR()
	/goto :somethingmeaningful 											eg. :waitforrezbox
	DEFINE: ALLUPPERCASE 														eg. #define AMIDEAD
		
	Common Used Variables:
	coreAuto						bool			automatic or manual Mode
	Target2Kill					int				the ID of the mob that should be the focus of your wanton destruction
	isValidTarget				bool			is ths a valid Target
	timer_???						string		Prefix for running timers. [Timers] in the Toon INI(s) will hold most base set times.
	MobAgro							int				range that you will engage a mob at
	_count, _x, _b, _i	int				local loop counts
	_tmpID							int				the passed/local target ID
	tmpHealOverride			int				control hp heal reduction percentage. For zones that impose a HP/Mana cap. (no effect on stamina calculations)
	
	Common Used Functions:
	check_exit										returns [TRUE/FALSE] if there is a reason to not do the current sub
	create_timer									creates a timer. will declare the variable if needed
	core_cast											"SPELLNAME" [alt|disc|gem#|item|0] [MobID|0] [subname]
	writeINI											updates the related ini and the loaded variable
		
	Tab spaces set to 2 if you care.
	
	Credits/Inspiration
		- cast pre-condition added for nukes, dots and a few other things. inspired by raiddruid.mac
		- ultraedit v24 wordfile - http://www.macroquest2.com/phpBB3/viewtopic.php?f=46&t=19321&hilit=ultraedit (adapted and updated to current MQ2)
		- NinjaADVLoot - 	is the core of the do_loot loot function used with VERY heavy mods/butchering. http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=19707
		- whoHas.mac [/whohas] - http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=20212 (this is a genius idea)
		- puller/targ acquisition is very loosely based off nytemyst pull code for his SK and the healing foundation
		- i stole the base forage functions from someone years ago. Thank You Whomever. fish code based off same processes and then promptly adapted. rewritten to use core.loot.ini list.

***|

| #warning
#turbo 120
#define DEBUG "/varset currentdebugsub"
#define SDEBUG "/echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax(\a-t${Macro.RunTime}\ax)"
#define OUT "/echo ${c-}-\ax"
#define VOUT "/if (${verbose}) /echo ${c-}-\ax"
#define VMELEE "/if (${switchEchoMelee}) /echo ${c-}-\ax"
#define VSPELL "/if (${switchEchoSpell}) /echo ${c-}-\ax"
#define VITEM "/if (${switchEchoItem}) /echo ${c-}-\ax"
#define VDISC "/if (${switchEchoDisc}) /echo ${c-}-\ax"
#define VALT "/if (${switchEchoAlt}) /echo ${c-}-\ax"
#define VBC "/if (${switchEchoBC}) /call echos bc"
#define ECHOCHANNEL "/if (${Bool[${echoChannel}]}) /${echoChannel} "
#define HUDPATH "/noparse /ini .\..\MQ2HUD.ini"
#define AMIDEAD "/if (${watch_for_death[]}) /call watch_for_rezbox"
#define SIMPLEEXIT "/if (${Me.Moving} || ${Me.Invis} || ${Select[${Me.State},DEAD,FEIGN,STUN,BIND]} || ${switchAmIDead} || ${flagCallNeedRez} || ${Me.Zoning}) /return"
#define CHECKEXIT "/if (${check_exit[]}) /return"
#define CHECKTIE "/if ((${SetTie} && !${Bool[${timer_check_Tie}]}) || (${SetTie} && ${SetTieLock})) /call set_tie"
#define CHECKREZ "/if (${coreAuto} && !${switchPull} && !${Me.Invis} && ${switchRezGive}) /call check_for_corpse"
#define CHECKSAFELIST "/if (!${validate_safelist[${_sender}]}) /return FALSE"
#define UPDATEHUD "/call update_HUD_notices"
#define CLEARCURSOR "/if ((${switchAutoCursor} && ${Cursor.ID} && !${timer_auto_cursor_pause}) || ${Bool[${autoInventoryItem.Find[${Cursor.Name}]}]}) /call sort_cursor"
#define TESTFUNCTION "/call test_function"
#define CHECKCOMBATCAST "/if (${coreAuto} && !${switchBuffCombat} && ${SpawnCount[npc radius ${combatRadius} playerstate 4 targetable]}) /return TRUE"
#define CHECKINPUTS "/call check_inputs"


#include tc\declare.inc
#include tc\common.inc
#include tc\MQ2Cast_Spell_Routines.inc
#include tc\mode.inc
#include tc\events.inc
#include tc\test.inc
#include tc\hud.inc
#include tc\fixini.inc
#include tc\class.ber.inc
#include tc\class.brd.inc
#include tc\class.bst.inc
#include tc\class.clr.inc
#include tc\class.dru.inc
#include tc\class.enc.inc
#include tc\class.mag.inc
#include tc\class.mnk.inc
#include tc\class.nec.inc
#include tc\class.pal.inc
#include tc\class.rng.inc
#include tc\class.rog.inc
#include tc\class.shd.inc
#include tc\class.shm.inc
#include tc\class.war.inc
#include tc\class.wiz.inc
#include tc\custom.inc



|***
 *	DES: Main .. duhh..
 *	USE: 
 *	INI: bunches of 'em
 *  NOTE: 
 ***|
sub main(string _ini)
	/call initialize_core ${_ini}
	/declare _count int 0
	  
	:loopmain
		DEBUG :loopmain main(${_ini})
	  CHECKINPUTS
	  UPDATEHUD FALSE

		| locked in maintenance mode ?
		/if (${maintenance.Find[${Me.DisplayName}]}) {
			/delay 5
			/goto :loopmain
		} 
	  AMIDEAD
  	
  	| if using eqbc, make sure you are still connected
		/if (${setCommunications.Equal[EQBC]} && !${timer_check_EQBC}) /call check_one_mind
		
		| make sure we're in the right zone
		/if (!${timer_validate_zone}) /call validate_zone FALSE FALSE
	
		| what is this for??
		/varset combat ${If[${coreAuto},${Ini[${INIClass},Common,combat]},FALSE]}
	
		| sort /heal override ##
		/if (${tmpHealOverride} != ${HealOverride}) /varset tmpHealOverride ${If[${HealOverride},${Float[${HealOverride}].Centi},99.99]}
	
		| adjustHUD death count
		/if (!${timer_HUD_death_check}) /varset hudDeathCount ${Int[${Ini[${INICore},deathcount,${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}]}]}
		
		CHECKREZ	
		CLEARCURSOR
	  CHECKINPUTS
		
		/if (${coreAuto} || ${switchAADiscnowManual}) {
			| check constant AA buffs
			/if (${Bool[${AANow1}]} || ${Bool[${AANow2}]}) /call check_AA_now
			| check constant Disc buffs
			/if (${Bool[${DiscNow1}]} || ${Bool[${DiscNow2}]}) /call check_Disc_now
		}

		| non class specific automated thingies.
		/if (${coreAuto}) {
			/if (${HomeSet}) /squelch /makecamp mpause
			
			| keep an eye out for real rezes
			/if (${flagCallNeedRez}) {
				/if (${Window[ConfirmationDialogBox].Open}) /varset markerDead TRUE
			}
			
			/call check1offBuffs
			AMIDEAD
		  CHECKINPUTS
		
			| check to see if someone needs a doctor?
			/if (${switchHealCure}) {
				/call cast_cure
			}
			
			| smoke 'em if 'yah got 'em
			/if (${autoRest}) {
				/if (!${switchPull} || (${switchPull} && !${SpawnCount[npc radius ${MobAgro} playerstate 4]})) /call do_rest
			}			
			
			| buff all the things
			/call check_buff_routines

			| fix exp
			/if (${AutoExpAdjust}) {
				/if (!${timer_check_EXP} && (!${SafeZone} || ${switchOverrideSafezone})) /call auto_adjust_EXP
			}

			| fix ur pet!
			/if (!${timer_Check_Familiar}) /call sort_familiar
			
			| food/drink
			/if (${Bool[${clickFoodDispenser}]} && !${timer_click_food}) /call click_summon_food
			/if (${Bool[${clickDrinkDispenser}]} && !${timer_click_drink}) /call click_summon_drink

			| sort out return to camp
			/if (${HomeSet}) {
				/if (!${SpawnCount[npc radius ${combatRadius} playerstate 4 targetable]} && ((${Me.Y} != ${MakeCamp.AnchorY}) && (${Me.X} != ${MakeCamp.AnchorX})) && (!${SafeZone} || ${switchOverrideSafezone})) /makecamp return
			}
		}
		
		/if (${Me.PctEndurance} < 32) {
			/if (${validate_class[FALSE, ${MeleeList}]}) /call cast_stamina_recovery
		}

		| use those AA.. hoarding bastard
		/if (${switchAAFireworks}) {
			/if (!${timer_Waste_Fireworks}) /call cast_AA_fireworks
		}

		| watch for spawn
		/if (${Bool[${watchSpawn}]}) {
			/if (!${timer_check_watch_spawn}) /call check_watch_spawn
		}

		| guns need ammo
		/if (${switchCombatRange}) /call check_ammo
		
		CHECKTIE
	  CHECKINPUTS

		| looter stuffs
		/if (${switchUseADVL}) {
			/if ((${coreAuto} || ${switchOverrideLoot}) && (!${SafeZone} || ${switchOverrideSafezone})) /call do_loot
		}

		| non normal modes of operation
		/call do_mode
	
		| use the one off clickies in the Toons INI
		/if (!${timer_check_odds_and_ends}) /call odds_and_ends

		| do we pull or assist	
		/if (${coreAuto} && (!${SafeZone} || ${switchOverrideSafezone})) {
			/if (!${Me.Invis} || (${coreAuto} && ${Select[${Me.Class.ShortName},ROG]} && ${switchSos})) {	
				/if (!${switchPull} || ${switchOffTank}) {
					/call get_assist_target	
				} else /if (${switchPull} && !${Target2Kill} && !${switchOffTank}) {	
					/call get_target
				}
			}
		}

		| check all the basics before we hit the class
		AMIDEAD
		CHECKINPUTS
		CHECKREZ
		CHECKTIE

		| time to take this bitch to church!
		/call core_${Me.Class.ShortName}

	/goto :loopmain
	
	| this is MQ2 reserved for end of macro
	| :OnExit	
	
/return



|***
 *	DES: initialize core
 *	USE: /call initialize_core
 *	INI: 
 *  NOTE: what did you expect?
 ***| 	
sub initialize_core(string _ini)
	/mqclear
	/if (${Target.ID}) /squelch /target clear

	| set adjustable INIs if you're in to that kind of thing
	/if (${Bool[${_ini}]}) {
		| set core INI alternate
		/if (!${Defined[INICore]}) /declare INICore string outer
		/varset INICore tc\core.${_ini}.ini
		
		| set class INI alternate
		/if (!${Defined[INIClass]}) /declare INIClass string outer 
		/varset INIClass tc\core.${_ini}.${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}.ini
		
		| set zone INI alternate
		/if (!${Defined[INIZone]}) /declare INIZone string outer 
		/varset INIZone tc\core.${_ini}.zone.ini

		| set loot INI alternate
		/if (!${Defined[INILoot]}) /declare INILoot string outer 
		/varset INILoot tc\core.${_ini}.loot.ini

	| and if you are not, use the base
	} else {
		| set core INI
		/if (!${Defined[INICore]}) /declare INICore string outer 
		/varset INICore tc\core.ini
		
		| set class INI
		/if (!${Defined[INIClass]}) /declare INIClass string outer 
		/varset INIClass tc\core.${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}.ini

		| set zone INI
		/if (!${Defined[INIZone]}) /declare INIZone string outer 
		/varset INIZone tc\core.zone.ini
		
		| set loot INI
		/if (!${Defined[INILoot]}) /declare INILoot string outer 
		/varset INILoot tc\core.loot.ini
	}
	
	| set remaining INIs
	/if (!${Defined[INIWiki]}) /declare INIWiki string outer tc\core.wiki.ini
	/if (!${Defined[INIBlurb]}) /declare INIBlurb string outer tc\core.blurb.ini
	
	/call set_declares
	/call set_declares_custom
	/if (${switchDispBuild}) /call echos initialize 0 0 0 0
	/call declare_${Me.Class.ShortName}
	/call check_plugin
	/call intialize_item_buffs
	/call set_alias
	/call declare_timers
	/call verify_build
	/call validate_zone FALSE TRUE
	/call base_preperation

  /if (${switchOverrideLos}) VOUT ${ocaution} ${sep} Ignoring Line of Sight\ax
	/if (${switchDispInfo}) VOUT Commands ${sep} ${cinfo}/info\ax
	/if (${maintenance.Find[${Me.DisplayName}]}) VOUT ${owarning} maintenance ${sep} ${cinfo}${Me.DisplayName}\ax
	/if (${Bool[${_ini}]}) {
		OUT ${onotice} Alternate INI in use ${sep} ${cinfo}${_ini}\ax
	}
	OUT ${cgood}Ready\ax
/return



|***
 *	DES: Settings I like to use. 
 *	USE: /call base_preperation
 *	INI: varries
 *  NOTE: 
 ***|
sub base_preperation()
	/varset currentdebugsub base_preperation()

	| set peer communications options
	/if (${validate_plugin[FALSE, |MQ2DanNet]}) {
		/djoin ${broadcastGroup}
		/squelch /dnet localecho ${switchDanLocalEcho}
		/squelch /dnet commandecho ${switchDanCommandEcho}
		/squelch /dnet frontdelim ON
		/squelch /dnet fullnames ${switchDanFullNames}
	}
	
	| fuck these plugins in particular
	/if (${validate_plugin[FALSE, |MQ2Bucles]}) {
		/plugin MQ2Bucles unload
	}

	| disable smart assists for TLP w/o underfoot
	/if (!${validate_expansion[FALSE, |16]}) {
		/if (${useSmartAssistG}) /call writeIni useSmartAssistG FALSE
		/if (${useSmartAssist1}) /call writeIni useSmartAssist1 FALSE
		/if (${useSmartAssist2}) /call writeIni useSmartAssist2 FALSE
		/if (${useSmartAssist3}) /call writeIni useSmartAssist3 FALSE
	}
	
	| clear the spawn watch
	/if (${Bool[${watchSpawn}]}) {
		/call writeINI watchSpawn Common FALSE
	}
	
	| a little display adjustments. If ur blind, get some glasses.
	/mqfont ${setMQFontSize}
	
	| clear rampage tank for healers
	/if (${validate_class[FALSE, |CLR|DRU|PAL|SHM]}) {
		/call writeINI RampageTank Heal FALSE
	}

	| why the fuck did Verant/SOE/DayBreak ever implement these as a default..??	
	/squelch /assist ${setAutoAssist}
	| /squelch /tgb ${setTGB}
	
	| disable the melee plugin and reset combat so you just stand there.
	/if (${switchDisableMQ2Melee}) {
		/if (${validate_plugin[FALSE, |mq2melee]}) {
			/melee off
			/squelch /melee reset
		}
	}

	| bard stuffs
	/if (${validate_class[FALSE, |BRD]}) {
		/if (${validate_plugin[FALSE, |mq2twist]}) {
			/squelch /twist clear
			/squelch /twist quiet
		}
	}

	| cpu stuffs
	/if (${validate_plugin[FALSE, |mq2cpuload]}) {
		/squelch /cpu auto
	}

	| turn off rez non guildies/group if it is still on. 'cause fuck everyone else.
	/if (${switchRezEveryone}) {
		/call writeINI switchRezEveryone Heal FALSE
	}

	| Show the HUD	
	/squelch /hud ${HudType}
	/squelch /loadhud ${HudName}
			
	| force sos switch FALSE for non rogues
	/if (!${validate_class[FALSE, |ROG]}) {
		/if (${switchSos}) /call writeINI switchSos Common FALSE
	}
		
	| check debuffs	switches	
	/call validate_debuff FALSE mezz
	/call validate_debuff FALSE malo
	/call validate_debuff FALSE tash
	/call validate_debuff FALSE cripple
	/call validate_debuff FALSE slow
	/call validate_debuff FALSE eradicate
	/call validate_debuff FALSE snare
		
	| check game cash?
	/if (${switchCheckGameCash}) /call check_free_ingame_cash		
		
	| KillCode Warning for people that like to AFK farm. you really shouldn't be doing that anyway..
	/if (${Select[${remoteKillKey},"CHANGE ME",NULL,FALSE]}) {
		VOUT ${sep} Hey.. You!
		VOUT ${owarning} ${sep} FIX: \aw/core killcode=\ax${remoteKillKey}
		VOUT ${cbad}CHANGE THIS\ax
	}		
/return

